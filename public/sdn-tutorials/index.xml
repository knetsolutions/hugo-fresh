<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sdn-tutorials on knetsolutions - Sofware Defined Networking (SDN) Training and Academic Projects</title>
    <link>http://knetsolutions.in/sdn-tutorials/</link>
    <description>Recent content in Sdn-tutorials on knetsolutions - Sofware Defined Networking (SDN) Training and Academic Projects</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://knetsolutions.in/sdn-tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mininet Cluster</title>
      <link>http://knetsolutions.in/sdn-tutorials/mininet-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://knetsolutions.in/sdn-tutorials/mininet-cluster/</guid>
      <description>1. Introduction Generally we use mininet to simulate the topology in a single system/computer/virutal machine. The System resources limits our topology size.
Suppose, we want to build the large topology with 1000s of switches and nodes. We cannot build this topology in single system. The solution is, we can build the subset of the topology in mulitiple systems and connect each other system via GRE Tunnel.

2. Demonstration Lets take the simple topology and demonstrated on deploying on two VMs, interconnect the topology and ping the nodes.</description>
    </item>
    
    <item>
      <title>Mininet Tutorial</title>
      <link>http://knetsolutions.in/sdn-tutorials/mininet-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://knetsolutions.in/sdn-tutorials/mininet-tutorial/</guid>
      <description>Mininet creates a realistic virtual network, running real kernel, switch and application code, on a single machine (VM, cloud or native), in seconds, with a single command &amp;#39;mn&amp;#39;.   
Primary usecase of Mininet is test environment(LAB) for Software Defined Networking (SDN) OpenFlow Protocol. It is used much beyond with many use cases. 
This is a series of Tutorials. Part1 - Mininet Introduction Part2 - Running Traffic Tests Part3 - Writing Custom Topology Part4 - Testing IPv6 in Mininet Part5 - Mininet Cluster</description>
    </item>
    
    <item>
      <title>OpenFlow Tutorial</title>
      <link>http://knetsolutions.in/sdn-tutorials/openflow-tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://knetsolutions.in/sdn-tutorials/openflow-tutorial/</guid>
      <description>1. Introduction The OPENFLOW specification covers the components and the basic functions of the switch, and the OpenFlow switch protocol to manage an OpenFlow switch from a remote OpenFlow controller.
Openflow Version Details:
Openflow 1.1
Openflow 1.2
Openflow 1.3
Openflow 1.4
Openflow 1.5
Most widley supported: 1.3</description>
    </item>
    
    <item>
      <title>PART1 - Mininet Introduction</title>
      <link>http://knetsolutions.in/sdn-tutorials/mininet-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://knetsolutions.in/sdn-tutorials/mininet-introduction/</guid>
      <description>Mininet creates a realistic virtual network, running real kernel, switch and application code, on a single machine (VM, cloud or native), in seconds, with a single command &amp;#39;mn&amp;#39;.   
1. Installation
O.S : UBUNTU 18.04

A. RYU installation
sudo pip install ryu  
To verify :
ryu-manager --version  Example:
suresh@suresh-vm:~$ ryu-manager --version ryu-manager 4.31 suresh@suresh-vm:~$  
Note: Make sure you do with &amp;ldquo;sudo pip install ryu&amp;rdquo; .</description>
    </item>
    
    <item>
      <title>Part2 - Mininet Traffic Tests</title>
      <link>http://knetsolutions.in/sdn-tutorials/mininet-traffic-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://knetsolutions.in/sdn-tutorials/mininet-traffic-tests/</guid>
      <description>1. TCP Traffic Tests 
A. Start the Mininet Topology 
  sudo mn --controller=remote,ip=127.0.0.1 --mac -i 10.1.1.0/24 --switch=ovsk,protocols=OpenFlow13 --topo=linear,4 -x  
B. Run the IPERF TCP Server 
h2 iperf -s  -s means server mode

C. RUN IPERF TCP Client 
h1 iperf -c 10.1.1.4 -i 10 -t 30 h1 iperf -c 10.1.1.4 -i 10 -b 10m -t 30 h1 iperf -c 10.1.1.4 -i 10 -P 10 -t 30</description>
    </item>
    
    <item>
      <title>Part3 - Mininet Custom Topology</title>
      <link>http://knetsolutions.in/sdn-tutorials/mininet-custom-topology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://knetsolutions.in/sdn-tutorials/mininet-custom-topology/</guid>
      <description>1. Writing Custom Topology in Mininet

mininet exposes the python API. We can create a custom topologies using the python API with few lines of code.
A. How to write Custom Topology in Mininet 
Steps are below.  Import the python required libraries  
from mininet.topo import Topo from mininet.net import Mininet  
 Write the Topology definition class  
 class SingleSwitchTopo(Topo): def build(self): s1 = self.</description>
    </item>
    
    <item>
      <title>Part4 - Testing IPv6 in Mininet</title>
      <link>http://knetsolutions.in/sdn-tutorials/testing-ipv6-in-mininet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://knetsolutions.in/sdn-tutorials/testing-ipv6-in-mininet/</guid>
      <description>1. Introduction
Generally we use IPv4 in all our networking devices/environment/test bed. But Some special cases requires IPv6 address. There are plenty of resources available in the internet for Mininet with IPv4.
In this blog, we discuss about using the IPv6 addresses in the Mininet Topology. We also discuss about, How to do Ping and TCP, UDP Traffic Tests (IPerf) with IPv6 addresses.
Some basic concepts of IPv6 addresses</description>
    </item>
    
  </channel>
</rss>